set nocompatible   " Disable vi-compatibility (needed for fancy plugins)
set laststatus=2   " Always whow the statusline
set nohls

set mouse=a  " MOUSE SUPPORT, FUCK YEA!

" Pathogen, for easier plugins.  https://github.com/tpope/vim-pathogen
" NOTE: need to load these first, before indent stuff, espcially the
" filetype plugin indent on # line
" Options for pathogen ~/.bundle plugins:
let g:jsx_pragma_required = 0
" Load Pathogen plugins:
execute pathogen#infect()

" Tab/indent amounts.
set tabstop=4      " How much a <TAB> is worth (as an actual char in the buffer)
set expandtab      " When pressing <TAB>, instead insert spaces
set softtabstop=4  " How many spaces a <TAB> should instead be
set shiftwidth=4   " How much to indent by with stuff like <<, >>, etc

" Indent treatment.
set autoindent
" Don't use smartindent or cindent, they interfere with plugin indent.`
"set smartindent   " Don't use smartindent, it's bad for non-c languages. Instead, let it use whatever the filetype specifies.
"set cindent        " Maybe use this? Not quite sure yet. Python files don't do well automatically.
filetype plugin indent on

" Indenting for specific file types.
autocmd FileType html setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType javascript setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4

set showmatch
set ruler          " Shows line,column # at bottom
set showcmd        " Display incomplete command
set backspace=2    " Backspace in insert mode
set whichwrap+=,h,l   " Cursor,backspace keys wrap too
set showmode
set wildmode=longest,list,full   " better tab complete menu
set wildmenu                     " better tab complete menu
set wildignore=*.pyc,*.o,*.obj,*.bak,*.exe  " tab complete ignores these!
let g:netrw_list_hide= '.*\.pyc$,.*\.o$,.*\.obj$,.*\.bak$,.*\.exe$,.*\.swp$'   " Files to ignore in Explorer
set ignorecase

" Syntax highlighting
syntax on
colorscheme heewa
filetype on           " try to detect syntax from filetype
au BufNewFile,BufRead *.handlebars set filetype=htmldjango
set nofoldenable    " disable folding

" Quick explore
nmap - :Explore<CR>

" Go settings
autocmd FileType go map gs <Plug>(go-def-split)
autocmd FileType go map gv <Plug>(go-def-vertical)

" Show trailing whitespace.
match ErrorMsg '\s\+$'

" Building and errors
nmap <F5> :cprev<CR>
nmap <F6> :cnext<CR>

" Jump to first line of pylint error.
function! FirstPylintError()
    echo 'running pylint...'

    " Run pylint with parsable output, grep for just relevant lines, and
    " get 1st.
    let all_errors = split(system(
        \ 'pylint -E --disable=E1103,E1101 ' .
        \ '--msg-template="{path}:{line}:{msg_id} {msg}" ' .
        \ '--output-format=text ' . expand('%')), '\n')
    call filter(all_errors, 'v:val =~ ''\.py:[0-9]\+''')

    if len(all_errors)
        " Set quickfix buffer for these errors.
        cexpr all_errors

        " Go to line of error.
        "exe matchstr(all_errors[0], '^[0-9]\+', 0, 0)
        exe split(all_errors[0], ':')[1]

        " Also show the error itself, but this time as a msg, so it stays in
        " message history.
        redraw
        echomsg split(all_errors[0], ':')[2] . ' (' . len(all_errors) . ' errors total)'
    else
        redraw
        echo len(all_errors) . ' errors'
    endif
endfunction
nmap <silent> <F4> :call FirstPylintError()<CR>

" Search highlighting (off by default)
map <F2> :set hlsearch!<CR> 
imap <F2> <ESC>:set hlsearch!<CR>a 

" Grep for word under cursor (ignoring binary files).
nnoremap <silent> <F3> :grep -I <cword> * <CR> <CR>

" use gi + char to insert char and remain in command mode
map gi i<space><esc>r

" Syntax highlighting and some other stuff for Code files.
autocmd BufRead * set formatoptions=tcql nocindent comments&
autocmd BufRead *.java,*.c,*.h,*.cc set formatoptions=ctroq cindent comments=sr:/**,mb:*,elx:*/,sr:/*,mb:*,elx:*/,://

" Filename as title in screen
autocmd BufEnter * let &titlestring = expand("%:t") 
"let &titlestring = expand("%:t")

if &term == "screen"
  set t_ts=k
  set t_fs=\
endif

if &term == "screen" || &term == "xterm"
  set title
  "set notitle
  set titleold=""
endif

" For cscope
set splitright  " So that vertical splits start on the right

" My maps

" Toggle highlighing of word under cursor without searching, though it's now
" the search term, so you can use 'n' and 'N' to jump to matches.
nnoremap <F10> :set invhls<CR>:let @/="<C-r><C-w>"<CR>/<BS>

" Open file on another machine.
"nnoremap \g :exec ":silent ! ssh $(echo heewa-dev1 -t DISPLAY=:0.0 geany $(echo $(pwd)/% \| sed -e \"s:$HOME/src:~/dev2-src:\") +" line(".") "\| sed -e 's:+ :+:')"

" Turn of syntastic checking a file on write (slows down writes).
"let g:syntastic_check_on_wq=0
" Turn off active syntastic checking by default.
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [], 'passive_filetypes': []}
" Python checking.
let g:syntastic_python_checkers = ['pylint']
let g:syntastic_python_pylint_args = '-f parseable -r n -i y -E -d E1103'
" Symbols for the gutter on errors/warnings.
let g:syntastic_error_symbol = 'XX'
let g:syntastic_style_error_symbol = 'sx'
highlight SyntasticErrorSign ctermfg=white ctermbg=red
let g:syntastic_warning_symbol = 'ww'
let g:syntastic_style_warning_symbol = 'sw'
" Only do things on errors.
"let g:syntastic_quiet_warnings=1


" Just, fuck, fuck Pathogen, fuck plugins, fuck everything.
filetype off
syntax on
filetype plugin indent on



" Plugin list, to install on a new system (cuz it doesn't come through dropbox/git):
" * powerline
" * command-t
" * a.vim - alternating between .c and .h files
" * pathogen - easier plugin installs
" * syntastic - syntax checking https://github.com/scrooloose/syntastic
