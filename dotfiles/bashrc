# According to:
# http://superuser.com/questions/789448/choosing-between-bashrc-profile-bash-profile-etc
#
#   * ~/.bashrc has anything you'd want at an interactive command line.
#     Command prompt, EDITOR variable, bash aliases for my use
#   * ~/.bashrc must not output anything

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

export HISTCONTROL=ignoredups # don't put duplicate lines in the history. See bash(1) for more options
export HISTFILESIZE=-1 # unlimited history file size
export HISTSIZE=1000000 # 1 million history items
export HISTFILE=~/.bash_history_actual # protect history file by using a non-standard name
shopt -s histappend # append history items to fil0e instead of overwriting

# make less more friendly for non-text input files, see lesspipe(1)
[[ -x /usr/bin/lesspipe ]] && eval "$(lesspipe)"

#
# Include private defs (not in main file cuz this one's in my public github).
#
if [[ -f "$HOME/.private_bashrc" ]]; then
    source $HOME/.private_bashrc
fi

if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi

    if [ -f /etc/profile.d/bash_completion.sh ]; then
        source /etc/profile.d/bash_completion.sh
    fi

    # Homebrew's completions
    if [[ "$(command -v brew)" != "" && -f "$(brew --prefix)/etc/bash_completion" ]]; then
        source "$(brew --prefix)/etc/bash_completion"
    fi

    # Take in all the custom completions too.
    if [[ -d "$HOME/.bash_completion.d" ]]; then
        for F in $(ls "$HOME"/.bash_completion.d/*.bash); do
            source $F
        done
    fi

    # Ugh, manual completions
    if [[ $(command -v aws_completer) != "" ]]; then
        complete -C aws_completer aws
    fi
fi

export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:';

# OS X specific confs
if [[ "$(uname)" = "Darwin" ]]; then
    export CLICOLOR=1
else
    alias ls='ls --color=auto'
fi

if which nvim > /dev/null; then
    export MANPAGER='nvim +Man!'
elif which vim > /dev/null; then
    export MANPAGER='vim -c "set ft=man ts=8 nomod nolist nonu noma" -c "noremap q :q<CR>" -'
fi

# Filename compatible, lexically ordered datestamp
alias ds="date '+%Y-%m-%d'"

if [[ "$(command -v paplay)" != "" ]]; then
    DONE() {
        local EC=$?
        local GOOD="$(ls -f /usr/share/sounds/{Yaru,freedesktop}/stereo/complete.oga 2>/dev/null | head -1)"
        local BAD="$(ls -f /usr/share/sounds/{Yaru,freedesktop}/stereo/dialog-error.oga 2>/dev/null | head -1)"
        [[ $EC == 0 ]] && paplay $GOOD || ( paplay $BAD && paplay $BAD && paplay $BAD )
        return $EC
    }
fi

if [[ -f "$HOME/.emoji_vars.sh" ]]; then
    source "$HOME/.emoji_vars.sh"
fi

if [[ "$HB_ENV" == "HOME" ]]; then
    # Node / io.js / nvm shit
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

    if [[ -f "$HOME/.emoji-prompt.sh" ]]; then
        source "$HOME/.emoji-prompt.sh"
    fi

    _GIT_PROMPT_DIR=''
    if [[ -f "$HOME/.bash-git-prompt/gitprompt.sh" ]]; then
        _GIT_PROMPT_DIR="$HOME/.bash-git-prompt"
    elif [[ $(command -v brew) != "" && -f "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh" ]]; then
        _GIT_PROMPT_DIR="$(brew --prefix)/opt/bash-git-prompt/share"
    fi

    if [[ "$_GIT_PROMPT_DIR" != "" ]]; then
        # Don't fetch remote every prompt!
        export GIT_PROMPT_FETCH_REMOTE_STATUS=0

        source $_GIT_PROMPT_DIR/gitprompt.sh
    else
        _where="\[\033[36m\]\u\[\033[m\]@\[\033[32m\]\h:\[\033[33;1m\]\w\[\033[m\]"
        declare -f _scm_prompt > /dev/null && _scm='$(_scm_prompt) ' || _scm=' '
        export PS1="$_where$_scm\$ "
    fi

    # pyenv
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PATH:$PYENV_ROOT/bin"
    if command -v pyenv 1>/dev/null 2>&1; then eval "$(pyenv init -)"; fi
fi
