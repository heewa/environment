# According to:
# http://superuser.com/questions/789448/choosing-between-bashrc-profile-bash-profile-etc
#
#   * ~/.bashrc has anything you'd want at an interactive command line.
#     Command prompt, EDITOR variable, bash aliases for my use
#   * ~/.bashrc must not output anything

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

if [[ "$ENVTYPE" != 'home' && "$ENVTYPE" != 'work' && "$ENVTYPE" != 'server' ]]; then
    echo "!!!! Unknown ENVTYPE '$ENVTYPE'. Set in ~/.private_profile" >&2
fi

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

export HISTCONTROL=ignoredups # don't put duplicate lines in the history. See bash(1) for more options
export HISTFILESIZE=-1 # unlimited history file size
export HISTSIZE=1000000 # 1 million history items
export HISTFILE=~/.bash_history_actual # protect history file by using a non-standard name
shopt -s histappend # append history items to fil0e instead of overwriting

OS="$(uname)"
if [[ "$OS" == 'Linux' ]]; then
    DISTRO="$(grep -s '^ID=' /etc/os-release | cut -d= -f2)"
else
    DISTRO=''
fi

# make less more friendly for non-text input files, see lesspipe(1)
[[ -x /usr/bin/lesspipe ]] && eval "$(lesspipe)"

#
# Include private defs (not in main file cuz this one's in my public github).
#
if [[ -f "$HOME/.private_bashrc" ]]; then
    source $HOME/.private_bashrc
fi

if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi

    if [ -f /etc/profile.d/bash_completion.sh ]; then
        source /etc/profile.d/bash_completion.sh
    fi
fi

# OS X specific confs
if [[ "$OS" = 'Darwin' ]]; then

    export CLICOLOR=1

    # Homebrew's completions
    if [[ "$(command -v brew)" != "" && -f "$(brew --prefix)/etc/bash_completion" ]]; then
        source "$(brew --prefix)/etc/bash_completion"
    fi

elif [[ "$OS" = 'Linux' ]]; then

    alias ls='ls --color=auto'

    if [[ "$DISTRO" = 'fedora' ]]; then
        alias t='toolbox run'
    fi

fi

# Take in all the custom completions too.
if [[ -d "$HOME/.bash_completion.d" ]]; then
    for F in $(ls "$HOME"/.bash_completion.d/*.bash); do
        source $F
    done
fi

# Ugh, manual completions
if [[ "$(command -v aws_completer)" != '' ]]; then
    complete -C aws_completer aws
fi

if [[ "$(command -v nvim)" != '' ]]; then
    export MANPAGER='nvim +Man!'
elif [[ "$(command -v vim)" != '' ]]; then
    export MANPAGER='vim -c "set ft=man ts=8 nomod nolist nonu noma" -c "noremap q :q<CR>" -'
fi

if [[ "$OS" == 'Linux' && "$(command -v paplay)" != '' ]]; then
    DONE() {
        local EC=$?
        local GOOD="$(ls -f /usr/share/sounds/{Yaru,freedesktop}/stereo/complete.oga 2>/dev/null | head -1)"
        local BAD="$(ls -f /usr/share/sounds/{Yaru,freedesktop}/stereo/dialog-error.oga 2>/dev/null | head -1)"
        [[ $EC == 0 ]] && paplay $GOOD || ( paplay $BAD && paplay $BAD && paplay $BAD )
        return $EC
    }
fi

if [[ -f "$HOME/.emoji_vars.sh" ]]; then
    source "$HOME/.emoji_vars.sh"
fi

export NVM_DIR="$HOME/.nvm"
function _load_nvm {
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
}

if [[ ! -z "${SHOULD_LOAD_NVM:+set}" ]]; then
    _load_nvm
else
    # Loading nvm slows down bash startup, so load it on demand
    function nvm {
        unset -f nvm
        _load_nvm
        nvm $@
    }
fi

# Loading pyenv slows down bash startup, so load it on demand
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PATH:$PYENV_ROOT/bin"
if [[ "$(command -v pyenv)" != "" ]]; then
    function pyenv {
        unset -f pyenv
        eval "$(pyenv init -)"
        pyenv $@
    }
fi

#if [[ "$ENVTYPE" == 'home' || "$ENVTYPE" == 'work' ]]; then
    _GIT_PROMPT_DIR=''
    if [[ -f "$HOME/.bash-git-prompt/gitprompt.sh" ]]; then
        _GIT_PROMPT_DIR="$HOME/.bash-git-prompt"
    elif [[ "$OS" == 'Darwin' && "$(command -v brew)" != '' && -f "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh" ]]; then
        _GIT_PROMPT_DIR="$(brew --prefix)/opt/bash-git-prompt/share"
    fi

    if [[ "$_GIT_PROMPT_DIR" != '' ]]; then
        # Don't fetch remote every prompt!
        export GIT_PROMPT_FETCH_REMOTE_STATUS=0

        source $_GIT_PROMPT_DIR/gitprompt.sh
    else
        _where="\[\033[36m\]\u\[\033[m\]@\[\033[32m\]\h:\[\033[33;1m\]\w\[\033[m\]"
        declare -f _scm_prompt > /dev/null && _scm='$(_scm_prompt) ' || _scm=' '
        export PS1="$_where$_scm\$ "
    fi
#fi

if [[ -f "$HOME/.cargo/env" ]]; then
    source "$HOME/.cargo/env"
fi
