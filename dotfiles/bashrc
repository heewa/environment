# According to:
# http://superuser.com/questions/789448/choosing-between-bashrc-profile-bash-profile-etc
#
#   * ~/.bashrc has anything you'd want at an interactive command line.
#     Command prompt, EDITOR variable, bash aliases for my use
#   * ~/.bashrc must not output anything

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups

# make less more friendly for non-text input files, see lesspipe(1)
[[ -x /usr/bin/lesspipe ]] && eval "$(lesspipe)"

#
# Include private defs (not in main file cuz this one's in my public github).
#
if [[ -f "$HOME/.private_bashrc" ]]; then
    source $HOME/.private_bashrc
fi

if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi

    if [ -f /etc/profile.d/bash_completion.sh ]; then
        source /etc/profile.d/bash_completion.sh
    fi

    # Homebrew's completions
    if [[ "$(which brew)" != "" && -f "$(brew --prefix)/etc/bash_completion" ]]; then
        source "$(brew --prefix)/etc/bash_completion"
    fi

    # Take in all the custom completions too.
    if [[ -d "$HOME/.bash_completion.d" ]]; then
        for F in $(ls "$HOME"/.bash_completion.d/*.bash); do
            source $F
        done
    fi

    # Ugh, manual completions
    if [[ $(which aws_completer) != "" ]]; then
        complete -C aws_completer aws
    fi
fi

# OS X specific confs
if [[ "$(uname)" = "Darwin" ]]; then
    alias ls='ls -G'

    # gnu sed on osx
    export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"

    # Colorize the Terminal for Mac
    export CLICOLOR=1;
else
    alias ls='ls --color'
fi

alias screen="screen -T xterm-color"

# General Go
# MY_GOPATH='$(echo $PWD | sed "s:\($HOME/src/[^/]*/[^/]*\)/src/.*:\1:"):~/go/test'
# alias set_my_gopath="export GOPATH=$MY_GOPATH"
# alias gogrep='grep -IR --include "*.go" --exclude-dir "vendor" --exclude-dir ".vendor_for_old" --exclude-dir "Godeps" --exclude-dir ".git"'
# alias gotest='~/go/test/bin/ginkgo -notify -race --randomizeAllSpecs -p'
# alias gomake='make -f $HOME/.golang.Makefile'
# gorun() { gomake RUN_ARGS="$*" run ;}

# Postgres DB
# alias pgstart='/usr/local/bin/postgres -D $PG_DATA_DIR -r /usr/local/var/postgres/server.log'

# Node / io.js / nvm shit
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

if [[ -f "$HOME/.emoji_vars.sh" ]]; then
    source "$HOME/.emoji_vars.sh"
fi

if [[ -f "$HOME/.emoji-prompt.sh" ]]; then
    source "$HOME/.emoji-prompt.sh"
fi

_GIT_PROMPT_DIR=''
if [[ -f "$HOME/.bash-git-prompt/gitprompt.sh" ]]; then
    _GIT_PROMPT_DIR="$HOME/.bash-git-prompt/gitprompt.sh"
elif [[ $(which brew) != "" && -f "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh" ]]; then
    _GIT_PROMPT_DIR="$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh"
fi

if [[ "$_GIT_PROMPT_DIR" != "" ]]; then
    source $_GIT_PROMPT_DIR

    # Don't fetch remote every prompt!
    export GIT_PROMPT_FETCH_REMOTE_STATUS=0
else
    export PS1="\[\033[36m\]\u\[\033[m\]@\[\033[32m\]\h:\[\033[33;1m\]\w\[\033[m\] $ "
fi

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PATH:$PYENV_ROOT/bin"
