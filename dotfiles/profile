# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

export GITAWAREPROMPT="$HOME/.bash/git-aware-prompt"
source $GITAWAREPROMPT/main.sh

# set a fancy prompt (non-color, unless we know we "want" color)
color_prompt="\[$bldgrn\]\u@\h\[$txtrst\]:\[$bldblu\]\w\[$txtrst\] \[$txtcyn\]\$git_branch\[$txtred\]\$git_dirty\[$txtrst\]"
case "$TERM" in
xterm-color|xterm-256color)
    export PS1="$color_prompt"
    ;;
xterm)
    export PS1="$color_prompt"
    ;;
screen)
    export PS1="$color_prompt"
    ;;
*)
    export PS1='\u@\h:\w'
    ;;
esac

rand() {
    printf $((  $1 *  RANDOM  / 32767   ))
}

rand_element () {
    local -a th=("$@")
    unset th[0]
    printf $'%s\n' "${th[$(($(rand "${#th[*]}")+1))]}"
}

# Emoji in prompt!!!
starts="🌊 ⚡️ ☁️ ⭐️ 🌚 🌝 🌞 🌜 🌍 🌵 🌴 🍄 🎃 💻 📺 🛀 🚽 🛁 🎨 🎬 🎤 🎧 🎶 🎵 👾 🎲 ⚽️ 🏀 🏈 🚴 🏇 🏊 🏄 🏂 ☕️ 🍵 🍺 🍷 🍸 🍕 🍔 🍟 🍣 🍱 🍙 🍜 🍳 🍦 🍧 🍰 🍭 🍒 🍋 🍉 🍑 🍌 🍍 🍆 🏩 🌇 🌆 🏯 🏰 ⛺️ 🌄 🌅 🗽 🌃 🌉 🎢 ⛵️ 🚀 ✈️ 🚁 🚎 🚌 🚕 🚛 🚲 "
endings="🐶 🐺 🐱 🐭 🐹 🐰 🐸 🐯 🐨 🐻 🐷 🐮 🐗 🐵 🐒 🐴 🐑 🐘 🐼 🐧 🐦 🐤 🐥 🐣 🐔 🐍 🐢 🐛 🐝 🐜 🐞 🐌 🐙 🐠 🐟 🐬 🐳 🐋 🐄 🐏 🐀 🐃 🐅 🐇 🐉 🐎 🐐 🐓 🐕 🐖 🐁 🐂 🐲 🐡 🐊 🐫 🐪 🐆 🐈 🐩 ⛄️ 🙈 🙉 🙊 💀 👽 💩 👾 👻 🎅"

function __prompt_command() {
    local EXIT="$?"             # This needs to be first

    # Need to call the git branch and dirty fns ourselves, so exit code remains
    # clean.
    find_git_branch
    find_git_dirty

    local RCol='\[\e[0m\]'

    local Red='\[\e[0;31m\]'
    local Gre='\[\e[0;32m\]'
    local BYel='\[\e[1;33m\]'
    local BBlu='\[\e[1;34m\]'
    local Pur='\[\e[0;35m\]'
    local Blk='\[\e[0;30m\]'

    local EXIT_STATE=""
    if [ $EXIT != 0 ]; then
        EXIT_STATE="${Red}^-- $EXIT${RCol} "
    fi

    local EMOJI_START=""
    local EMOJI_END="$"
    if [ $(uname -s) == "Darwin" ]; then
        EMOJI_START="$(rand_element $starts) "
        EMOJI_END=" $(rand_element $endings)${Blk}¸${RCol}"
    fi

    local USER_HOST="${Gre}\u${RCol}@${BBlu}\h${RCol}"
    local DIR_PATH="${BBlu}\w${RCol}"
    local GIT_STATE="${Pur}\$git_branch${Red}\$git_dirty${RCol}"

    PS1="$EMOJI_START$EXIT_STATE$USER_HOST:$DIR_PATH $GIT_STATE$EMOJI_END "
}
export PROMPT_COMMAND="__prompt_command"

#
# Include private defs (not in main file cuz this one's in my public github).
#
if [ -f ~/.private_profile ]; then
    source $HOME/.private_profile
fi

# Comment in the above and uncomment this below for a color prompt
#PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

#if [ -f ~/.bash_aliases ]; then
#    . ~/.bash_aliases
#fi

# enable color support of ls and also add handy aliases
#if [ "$TERM" != "dumb" ]; then
    #eval "`dircolors -b`"
    #alias ls='ls --color=always'
    #alias dir='ls --color=auto --format=vertical'
    #alias vdir='ls --color=auto --format=long'
#fi

# some more ls aliases
alias ls='ls -G'
alias ll='ls -l'
alias llh='ll -h'
#alias la='ls -A'
#alias l='ls -CF'

alias screen="screen -T xterm-color"
alias wsudo="sudo -u www-data"

# Git Grep
alias ggrep='grep -IR --exclude-dir ".git"'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

# Take in all the custom completions too.
for F in "$(ls ~/Documents/LinuxEnvironment/bash_completion/*.bash)"; do
    if [ -f "$F" ]; then
        . "$F"
    fi
done

export EDITOR=vim
export PATH=~/bin:~/scripts:/usr/local/sbin:/usr/local/bin:$HOME/.rbenv/bin:$PATH:/build/trees/bin

alias fin="if [ \$? = 0 ]; then ssh heewa@heewa-dev1 -t \"DISPLAY=:0.0 /usr/bin/notify-send 'Done' '$USER@$HOSTNAME' -i face-smile -t 1000000\"; true; else ssh heewa@heewa-dev1 -t \"DISPLAY=:0.0 /usr/bin/notify-send --urgency=critical 'Done FAILED' '$USER@$HOSTNAME' -i face-angry -t 1000000\"; false; fi"
#alias done="if [ \$? = 0 ]; then echo true; else echo false; fi"

alias macvim='open -a MacVim.app'

#
# Aliases for remoting
#
alias go_heewa='mosh -ssh="ssh -i .ssh/macbookpro.pem" ubuntu@heewa.net "./run_screen.sh"'
export STITCH_TEST='ec2-184-73-18-43.compute-1.amazonaws.com'
export FRESH_DJANGO='50.56.92.160'

# AWS Tools need JAVA_HOME set to dir that contains the bin/java binary path.
export JAVA_HOME='/usr'

alias my-pivotal='pivotal_tools show stories --project-index=7 --for=heewabarfchin'


# Setting PATH for Python 2.7
# The orginal version is saved in .profile.pysave
#PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}"
#export PATH

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# Go path
export GOROOT=/usr/local/opt/go/libexec
#export GOBIN=$(brew --prefix go)/libexec/bin/
export GOPATH=$HOME/go/global
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin:~/go/test/bin

# General Go
MY_GOPATH='$(echo $PWD | sed "s:\($HOME/src/.*\)/src/github.com.*:\1:"):~/go/test'
alias set_my_gopath="export GOPATH=$MY_GOPATH"
alias gogrep='grep -IR --include "*.go" --exclude-dir "vendor" --exclude-dir "Godeps" --exclude-dir ".git"'
alias gotest='~/go/test/bin/ginkgo -notify -race --randomizeAllSpecs -p'
alias gomake='make -f $HOME/.golang.Makefile'
gorun() { gomake RUN_ARGS="$*" run ;}

# Timehop Go
TH_ENV='env $(grep -shv " *#" .env .local_env)'
TH_GOPATH='$(echo $PWD | grep -o "$HOME/src/Timehop/[^/]*"):$(echo $PWD | grep -o "$HOME/src/Timehop/[^/]*/src/github.com/timehop/[^/]*")/Godeps/_workspace:~/go/test'
alias thgo="$TH_ENV GOPATH=$TH_GOPATH go"
alias thvim="GOPATH=~/go/vim:$TH_GOPATH vim"
alias thgvim="GOPATH=~/go/vim:$TH_GOPATH gvim"
alias thginkgo="$TH_ENV GOPATH=$TH_GOPATH ~/go/test/bin/ginkgo"

# GoDep Based Go
GD_GOPATH='$(echo $PWD | sed "s:\($HOME/src/.*\)/src/github.com.*:\1:"):Godeps/_workspace:~/go/test'
alias set_godep_gopath="export GOPATH=$GD_GOPATH"
alias gdgo="GOPATH=$GD_GOPATH go"
alias gdvim="GOPATH=~/go/vim:$GD_GOPATH vim"
alias gdgvim="GOPATH=~/go/vim:$GD_GOPATH gvim"
alias gdginkgo="GOPATH=$GD_GOPATH ~/go/test/bin/ginkgo"

# Vendor Based Go
VENDOR_GOPATH='$(echo $PWD | sed "s:\($HOME/src/.*\)/src/github.com.*:\1:"):$PWD/.vendor_for_old:~/go/test'
alias set_vendor_gopath="export GOPATH=$VENDOR_GOPATH"
alias govim="GOPATH=~/go/vim:$VENDOR_GOPATH vim"

# Use Go 1.5 vendoring experiment
export GO15VENDOREXPERIMENT=1


# Something about ruby?
#if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi


# Postgres DB
export PG_DATA_DIR=/usr/local/var/postgres
alias pgstart='/usr/local/bin/postgres -D $PG_DATA_DIR -r /usr/local/var/postgres/server.log'

# Node / io.js / nvm shit
export NVM_DIR=~/.nvm
if [ $(uname -s) == "Darwin" ]; then
    source $(brew --prefix nvm)/nvm.sh
fi


# Fuck nose. Fuck python. Fuck everything.
export NOSE_LOGFORMAT='[%(levelname)7s %(asctime)s %(filename)s:%(lineno)d %(funcName)s()]    %(message)s'

# Fuck node and JS as well. Fuck all the things.
export NODE_REPL_HISTORY_FILE=$HOME/.node_repl_history

# Preeeetty
if [ $(uname -s) == "Darwin" ]; then
    archey -c
else
    archey
fi
